// Tienda de bebidas con personalización desde admin import { useState, useEffect } from "react"; import { Button } from "@/components/ui/button"; import { Input } from "@/components/ui/input"; import { Card, CardContent } from "@/components/ui/card";

const getStoredProducts = () => JSON.parse(localStorage.getItem("alcoholStoreProducts")) || []; const getStoredPassword = () => localStorage.getItem("adminPassword") || "admin123"; const getStoredOrders = () => JSON.parse(localStorage.getItem("alcoholStoreOrders")) || []; const getStoredSettings = () => JSON.parse(localStorage.getItem("storeSettings")) || {};

export default function AlcoholStore() { const [products, setProducts] = useState(getStoredProducts()); const [cart, setCart] = useState([]); const [isAdmin, setIsAdmin] = useState(false); const [passwordInput, setPasswordInput] = useState(""); const [adminPassword, setAdminPassword] = useState(getStoredPassword()); const [newPassword, setNewPassword] = useState(""); const [newProduct, setNewProduct] = useState({ name: "", price: "", stock: "", image: "", category: "" }); const [editingProduct, setEditingProduct] = useState(null); const [location, setLocation] = useState(null); const [orders, setOrders] = useState(getStoredOrders()); const [search, setSearch] = useState(""); const [filterCategory, setFilterCategory] = useState(""); const [storeSettings, setStoreSettings] = useState(getStoredSettings());

useEffect(() => { navigator.geolocation.getCurrentPosition( (position) => setLocation({ lat: position.coords.latitude, lng: position.coords.longitude }), (error) => console.error("Error al obtener ubicación", error) ); }, []);

useEffect(() => { localStorage.setItem("alcoholStoreProducts", JSON.stringify(products)); }, [products]);

useEffect(() => { localStorage.setItem("alcoholStoreOrders", JSON.stringify(orders)); }, [orders]);

useEffect(() => { localStorage.setItem("adminPassword", adminPassword); }, [adminPassword]);

useEffect(() => { localStorage.setItem("storeSettings", JSON.stringify(storeSettings)); }, [storeSettings]);

const handleLogin = () => { if (passwordInput === adminPassword) setIsAdmin(true); else alert("Contraseña incorrecta"); };

const changePassword = () => { if (newPassword.trim()) { setAdminPassword(newPassword.trim()); setNewPassword(""); alert("Contraseña actualizada"); } };

const addToCart = (product) => { setCart([...cart, product]); };

const sendOrder = () => { const cartText = cart.map((p) => ${p.name} x1).join(", "); const message = Hola, quiero pedir: ${cartText}; const encodedMsg = encodeURIComponent(message); const mapsLink = location ? https://maps.google.com/?q=${location.lat},${location.lng} : "Ubicación no disponible"; const encodedLocation = encodeURIComponent(Ubicación: ${mapsLink});

const newOrder = {
  items: cart,
  date: new Date().toLocaleString(),
  location: mapsLink,
};
setOrders([...orders, newOrder]);
setCart([]);

window.open(https://wa.me/?text=${encodedMsg}%20%0A${encodedLocation});

};

const handleImageUpload = (e) => { const file = e.target.files[0]; if (!file) return; const reader = new FileReader(); reader.onloadend = () => setNewProduct({ ...newProduct, image: reader.result }); reader.readAsDataURL(file); };

const addProduct = () => { const parsedProduct = { ...newProduct, price: parseFloat(newProduct.price), stock: parseInt(newProduct.stock), }; if (editingProduct) { setProducts(products.map((p) => (p.id === editingProduct ? { ...parsedProduct, id: editingProduct } : p))); setEditingProduct(null); } else { const id = products.length + 1; setProducts([...products, { ...parsedProduct, id }]); } setNewProduct({ name: "", price: "", stock: "", image: "", category: "" }); };

const editProduct = (product) => { setEditingProduct(product.id); setNewProduct(product); };

const deleteProduct = (id) => { if (confirm("¿Seguro que quieres eliminar este producto?")) { setProducts(products.filter((p) => p.id !== id)); } };

const updateStock = (id, newStock) => { setProducts(products.map((p) => (p.id === id ? { ...p, stock: parseInt(newStock) } : p))); };

const updateStoreSettings = (key, value) => { setStoreSettings({ ...storeSettings, [key]: value }); };

const uniqueCategories = Array.from(new Set(products.map((p) => p.category)));

const filteredProducts = products.filter((product) => { const matchesSearch = product.name.toLowerCase().includes(search.toLowerCase()); const matchesCategory = filterCategory ? product.category === filterCategory : true; return matchesSearch && matchesCategory; });

const renderPanels = () => { const { bannerText, backgroundColor, primaryColor, logoUrl } = storeSettings; return ( <div style={{ backgroundColor }} className="p-4"> {logoUrl && <img src={logoUrl} alt="Logo" className="h-16" />} {bannerText && <div className="text-center text-2xl font-semibold" style={{ color: primaryColor }}>{bannerText}</div>} </div> ); };

if (!isAdmin) { return ( <div className="p-6 max-w-md mx-auto"> <h2 className="text-2xl font-bold mb-4">Iniciar sesión como Administrador</h2> <Input type="password" placeholder="Contraseña" value={passwordInput} onChange={(e) => setPasswordInput(e.target.value)} /> <Button className="mt-2" onClick={handleLogin}>Entrar</Button>

<h3 className="mt-6 text-sm text-gray-400">Contraseña por defecto: admin123</h3>
  </div>
);

}

return ( <div className="p-4 max-w-5xl mx-auto"> {renderPanels()} <div className="flex justify-between items-center mb-6"> <h1 className="text-3xl font-bold">Tienda de Bebidas (Admin)</h1> <div className="flex items-center gap-2"> <Input type="password" placeholder="Nueva contraseña" value={newPassword} onChange={(e) => setNewPassword(e.target.value)} /> <Button onClick={changePassword}>Cambiar Contraseña</Button> </div> </div>

<div className="mb-6">
    <h2 className="text-xl font-semibold mb-2">{editingProduct ? "Editar Producto" : "Agregar Producto"}</h2>
    <div className="grid grid-cols-5 gap-2">
      <Input placeholder="Nombre" value={newProduct.name} onChange={(e) => setNewProduct({ ...newProduct, name: e.target.value })} />
      <Input placeholder="Precio" type="number" value={newProduct.price} onChange={(e) => setNewProduct({ ...newProduct, price: e.target.value })} />
      <Input placeholder="Stock" type="number" value={newProduct.stock} onChange={(e) => setNewProduct({ ...newProduct, stock: e.target.value })} />
      <Input placeholder="Categoría" value={newProduct.category} onChange={(e) => setNewProduct({ ...newProduct, category: e.target.value })} />
      <input type="file" accept="image/*" onChange={handleImageUpload} />
    </div>
    <Button className="mt-2" onClick={addProduct}>{editingProduct ? "Guardar Cambios" : "Agregar"}</Button>
  </div>

  <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-10">
    {products.map((product) => (
      <Card key={product.id}>
        <CardContent className="p-4">
          {product.image && <img src={product.image} alt={product.name} className="w-full h-40 object-cover rounded mb-2" />}
          <h2 className="text-xl font-semibold">{product.name}</h2>
          <p className="text-sm text-gray-500">Categoría: {product.category}</p>
          <p>${product.price.toFixed(2)}</p>
          <div className="flex items-center gap-2">
            <label>Stock:</label>
            <Input type="number" className="w-20" value={product.stock} onChange={(e) => updateStock(product.id, e.target.value)} />
          </div>
          <div className="flex gap-2 mt-2">
            <Button onClick={() => editProduct(product)}>Editar</Button>
            <Button variant="destructive" onClick={() => deleteProduct(product.id)}>Eliminar</Button>
          </div>
        </CardContent>
      </Card>
    ))}
  </div>

  <div className="mt-6 border-t pt-6">
    <h2 className="text-2xl font-bold mb-2">Historial de Pedidos</h2>
    {orders.length === 0 ? (
      <p>No hay pedidos aún.</p>
    ) : (
      <ul className="list-disc pl-6">
        {orders.map((order, index) => (
          <li key={index} className="mb-2">
            <strong>{order.date}</strong> - {order.items.map((item) => item.name).join(", ")}<br />
            <a href={order.location} target="_blank" className="text-blue-500">Ver ubicación</a>
          </li>
        ))}
      </ul>
    )}
  </div>
</div>

); }
